#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>

using namespace std;

vector<vector<int>> f(const vector<vector<int>> &matrix, int M)
{
    vector<vector<int>> res;
    for (const auto &arr : matrix)
    {
        vector<int> tmp;
        deque<pair<int, int>> stack;
        for (int idx = 0; idx < arr.size(); ++idx)
        {
            int i = arr[idx];
            while (!stack.empty() && stack.back().first <= i)
            {
                stack.pop_back();
            }
            stack.emplace_back(i, idx);
            while (!stack.empty() && stack.front().second < idx - M + 1)
            {
                stack.pop_front();
            }
            if (idx >= M - 1)
            {
                tmp.push_back(stack.front().first);
            }
        }
        res.push_back(tmp);
    }
    return res;
}

vector<vector<int>> transpose(const vector<vector<int>> &matrix)
{
    vector<vector<int>> transposed(matrix[0].size(), vector<int>(matrix.size()));
    for (size_t i = 0; i < matrix.size(); ++i)
    {
        for (size_t j = 0; j < matrix[0].size(); ++j)
        {
            transposed[j][i] = matrix[i][j];
        }
    }
    return transposed;
}

int main()
{
    int M = 3;
    vector<vector<int>> A = {
        {1, 2, 13, 4, 16},
        {7, 8, 3, 10, 1},
        {19, 1, 14, 15, 5},
        {19, 3, 20, 21, 22}};

    vector<vector<int>> B = f(A, M);

    for (const auto &row : B)
    {
        for (int val : row)
        {
            cout << val << " ";
        }
        cout << endl;
    }
    vector<vector<int>> C = transpose(B);
    vector<int> P;

    for (const auto &row : f(C, M))
    {
        P.insert(P.end(), row.begin(), row.end());
    }

    for (int val : P)
    {
        cout << val << " ";
    }

    return 0;
}
