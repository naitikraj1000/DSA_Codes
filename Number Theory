// Binary Exponentiation
// Divide and Conquer (Recursion Power Divide)
// Iterative (Binary Representation)

int binExpIter(int a, int b)
{
    int ans = 1;
    while (b)
    {
        if (b & 1)
        {
            ans = (ans *1ll* a)%mod;
        }
        a = (a *1ll* a)%mod; 
        b >>= 1;// b/2;
    }
    return ans;
}

// Modular Multiplicative Inverse
// ax â‰¡ 1 ( mod m ) Muodular Multiplicative inverse of a^-1=x for which x satisy the condition
// For m and a are coprime and A is not a factor of m

int modular_inverse(int a){
    return binExpIter(a,mod-2);
}

int modular_division(int a,int inverse){
    // a *(b^-1)
    return (a*1ll*modular_inverse(inverse))%mod;
}
