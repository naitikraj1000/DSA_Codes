#include<bits/stdc++.h>
using namespace std;
#define ll long long

class SegmentTree {
private:
    vector<int> array;
    vector<int> tree;
    vector<int> lazy;
    int size;

    void buildTree(int node, int start, int end) {
        if (start == end) {
            tree[node] = array[start];
        } else {
            int mid = (start + end) / 2;
            buildTree(2 * node + 1, start, mid);
            buildTree(2 * node + 2, mid + 1, end);
            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
        }
    }

    void updateRange(int node, int start, int end, int left, int right, int value) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start > end || start > right || end < left) {
            return;
        }

        if (start >= left && end <= right) {
            tree[node] += value;
            if (start != end) {
                lazy[2 * node + 1] += value;
                lazy[2 * node + 2] += value;
            }
            return;
        }

        int mid = (start + end) / 2;
        updateRange(2 * node + 1, start, mid, left, right, value);
        updateRange(2 * node + 2, mid + 1, end, left, right, value);
        tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int query(int node, int start, int end, int left, int right) {
        if (start > end || start > right || end < left) {
            return numeric_limits<int>::min();
        }

        if (lazy[node] != 0) {
            tree[node] += lazy[node];
            if (start != end) {
                lazy[2 * node + 1] += lazy[node];
                lazy[2 * node + 2] += lazy[node];
            }
            lazy[node] = 0;
        }

        if (start >= left && end <= right) {
            return tree[node];
        }

        int mid = (start + end) / 2;
        int leftQuery = query(2 * node + 1, start, mid, left, right);
        int rightQuery = query(2 * node + 2, mid + 1, end, left, right);
        return max(leftQuery, rightQuery);
    }

public:
    SegmentTree(const vector<int>& arr) {
        array = arr;
        size = arr.size();
        tree.resize(4 * size);
        lazy.resize(4 * size, 0);
        buildTree(0, 0, size - 1);
    }

    void updateRange(int left, int right, int value) {
        updateRange(0, 0, size - 1, left, right, value);
    }

    int query(int left, int right) {
        return query(0, 0, size - 1, left, right);
    }
};

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    SegmentTree segTree(arr);

    // Query max value in range [1, 4]
    cout << segTree.query(1, 4) << endl;

    // Add 10 to all elements in range [2, 5]
    segTree.updateRange(2, 5, 10);

    // Query max value in range [1, 4] after update
    cout << segTree.query(1, 4) << endl;

    return 0;
}
