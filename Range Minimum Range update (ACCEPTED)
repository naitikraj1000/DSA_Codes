#include<bits/stdc++.h>
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL);
using namespace std ;

const int N = 1e6 + 2;
long arr[N] = {0};
long segTree[4 * N] = {0};
long lazy[4 * N] = {0};


void build(int i, int l, int r)
{
	if (l == r)
	{
		segTree[i] = arr[l];
		return;
	}
	int mid = l + (r - l) / 2;
	build(2 * i + 1, l, mid);
	build(2 * i + 2, mid + 1, r);
	segTree[i] = min(segTree[2 * i + 1], segTree[2 * i + 2]);
}

void update(int i, int ss, int se, int qs, int qe, long val)
{
	if (lazy[i] != 0)
	{
		segTree[i] += lazy[i];
		if (ss != se)
		{
			lazy[2 * i + 1] += lazy[i];
			lazy[2 * i + 2] += lazy[i];
		}
		lazy[i] = 0;
	}
	if (ss > se || ss > qe || se < qs)
		return ;

	if (ss >= qs && se <= qe)
	{
		segTree[i] += val;
		if (ss != se)
		{
			lazy[2 * i + 1] += val;
			lazy[2 * i + 2] += val;
		}
		return ;
	}
	int mid = ss + (se - ss) / 2;
	update(2 * i + 1, ss, mid, qs, qe, val);
	update(2 * i + 2, mid + 1, se, qs, qe, val);
	segTree[i] = min(segTree[2 * i + 1], segTree[2 * i + 2]);

}

long getMin(int i, int ss, int se, int qs, int qe)
{
	if (lazy[i] != 0)
	{
		segTree[i] += lazy[i];
		if (ss != se)
		{
			lazy[2 * i + 1] += lazy[i];
			lazy[2 * i + 2] += lazy[i];
		}
		lazy[i] = 0;
	}
	if (ss > se || ss > qe || se < qs)
		return INT_MAX ;

	if (ss >= qs && se <= qe)
		return segTree[i];

	int mid = ss + (se - ss) / 2;
	long left  = getMin(2 * i + 1, ss, mid, qs, qe);
	long right = getMin(2 * i + 2, mid + 1, se, qs, qe);
	return min(left, right);

}

int main()
{
	fast_io;
	int n , q;
	cin >> n >> q;
	for (int i = 0; i < n; i++)
		cin >> arr[i];

	build(0, 0, n - 1);
	while (q--)
	{
		char x;
		int l, r;
		cin >> x >> l >> r;
		if (x == 'q')
		{
			cout << getMin(0, 0, n - 1, l-1, r-1) << endl;
		}
		else
		{
			long val ;
			cin >> val;
			update(0, 0, n - 1, l-1, r-1, val);
		}
	}

	return 0;

}
