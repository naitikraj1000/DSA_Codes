/*
    MY YOUTUBE VIDEO ON THIS Qn : https://www.youtube.com/watch?v=qases-9gOpk
    Company Tags                : MICROSOFT
    GfG Link                    : https://www.geeksforgeeks.org/problems/search-pattern0205/1
*/



//Approach-1 (KMP Algorithm)
//T.C : O(m+n)
//S.C : O(m) where m is the length of pattern
class Solution
{
    public:
        // Function to compute the LPS (Longest Proper Prefix which is also Suffix) array
        void computeLPS(string pattern, vector<int>& lps) {
            int M = pattern.length();
            int len = 0; // Length of the previous longest prefix & suffix
        
            lps[0] = 0; // Because there is no proper suffix and prefix of pattern[0..0]
        
            int i = 1;
            while (i < M) {
                if (pattern[i] == pattern[len]) {
                    len++;
                    lps[i] = len;
                    i++;
                } else {
                    if (len != 0) {
                        len = lps[len - 1]; //You can also write, len = len-1;
                    } else {
                        lps[i] = 0;
                        i++;
                    }
                }
            }
        }
        
        vector <int> search(string pat, string txt) {
            int N = txt.length();
            int M = pat.length();
            vector<int> result;
            
            // Create an LPS array to store the longest proper prefix which is also a suffix
            //lps[i] = the longest proper prefix of pat[0..i] which is also a suffix of pat[0..i]. 
            vector<int> lps(M, 0);
            computeLPS(pat, lps);
        
            int i = 0; // Index for text
            int j = 0; // Index for pattern
        
            while (i < N) {
                if (pat[j] == txt[i]) {
                    i++;
                    j++;
                }
        
                if (j == M) {
                    result.push_back(i-j+1); //Pattern found at index i-j+1 (If you have to return 1 Based indexing, that's why added + 1)
                    j = lps[j - 1];
                } else if (i < N && pat[j] != txt[i]) {
                    if (j != 0) {
                        j = lps[j - 1];
                    } else {
                        i++;
                    }
                }
            }
            
            return result;
        }
     
};


void computeLPSArray(char *pat, int M, int *lps)
  {
      int len = 0;  // lenght of the previous longest prefix suffix
      int i;

      lps[0] = 0; // lps[0] is always 0
      i = 1;

      // the loop calculates lps[i] for i = 1 to M-1
      while (i < M)
      {
         //example "abababca" and i==5, len==3. The longest prefix suffix is "aba", when pat[i]==pat[len],
         //we get new prefix "abab" and new suffix "abab", so increase length of  current lps by 1 and go to next iteration. 
         if (pat[i] == pat[len])
         {
           len++;
           lps[i] = len;
           i++;
         }
         else // (pat[i] != pat[len])
         {
           if (len != 0)
           {
             len = lps[len-1];
             //This is tricky. Consider the example "ababe......ababc", i is index of 'c', len==4. The longest prefix suffix is "abab",
             //when pat[i]!=pat[len], we get new prefix "ababe" and suffix "ababc", which are not equal. 
             //This means we can't increment length of lps based on current lps "abab" with len==4. We may want to increment it based on
             //the longest prefix suffix with length < len==4, which by definition is lps of "abab". So we set len to lps[len-1],
             //which is 2, now the lps is "ab". Then check pat[i]==pat[len] again due to the while loop, which is also the reason
             //why we do not increment i here. The iteration of i terminate until len==0 (didn't find lps ends with pat[i]) or found
             //a lps ends with pat[i].
           }
           else // if (len == 0)
           { // there isn't any lps ends with pat[i], so set lps[i] = 0 and go to next iteration.
             lps[i] = 0;
             i++;
           }
         }
      }
  }  
