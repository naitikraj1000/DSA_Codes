#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 2e5 + 5;
ll int distances[N];
unordered_map<int, int> path1, path2;
unordered_map<int, int> path[N];
ll int steps = 0;
// path is definded by path[child][parent]....
int dfs_distance(vector<int> adj[], int n, int node, int parent, ll int dist)
{
    // cout << node << endl;
    int ans = 0;
    distances[node] = dist;
    for (int i = 0; i < adj[node].size(); i++)
    {
        if (adj[node][i] == parent)
            continue;
        int temp_ans = 0;
        temp_ans = dfs_distance(adj, n, adj[node][i], node, dist + 1);
        ans += temp_ans;
        path[adj[node][i]][node] = min(temp_ans, 3);
        // cout << node << " --> " << adj[node][i] << "--> " << path[adj[node][i]][node] << endl;
    }

    if (path1[node] && path2[node])
    {
        return min(3, ans + 3);
    }
    else if (path1[node])
    {
        if (ans == 1)
        {
            return 1;
        }
        return min(ans + 1, 3);
    }
    else if (path2[node])
    {
        if (ans == 2)
        {
            return 2;
        }
        return min(ans + 2, 3);
    }
    else
    {
        return min(ans, 3);
    }
}

void graph_game(vector<int> adj[], int n, int node, int parent, int pos1, int pos2, int d)
{
    // cout << " ---> " << node << endl;
    for (int i = 0; i < adj[node].size(); i++)
    {
        if (adj[node][i] == parent)
            continue;
        // checking the player game
        if (path[adj[node][i]][node] == 0)
        {
            continue;
        }
        // no game
        else if (path[adj[node][i]][node] == 1)
        {
            // player 1 play
            if (distances[node] - distances[pos2] == d)
            {
                steps += 2 * (d);
                graph_game(adj, n, adj[node][i], node, adj[node][i], node, d);
            }
            else
            {
                graph_game(adj, n, adj[node][i], node, adj[node][i], pos2, d);
            }
        }
        else if (path[adj[node][i]][node] == 2)
        {
            // player 2 play
            if (distances[node] - distances[pos1] == d)
            {
                steps += 2 * (d);
                graph_game(adj, n, adj[node][i], node, node, adj[node][i], d);
            }
            else
            {
                graph_game(adj, n, adj[node][i], node, pos1, adj[node][i], d);
            }
        }
        else if (path[adj[node][i]][node] == 3)
        {

            // Both player play
            graph_game(adj, n, adj[node][i], node, adj[node][i], adj[node][i], d);
        }
    }
    if (parent == -1)
    {
        // cout << node << " ---> " << steps << endl;
        return;
    }

    if (path[node][parent] == 3)
    {
        steps += 4;
    }
    else if (path[node][parent] == 1)
    {
        // path1
        if (distances[node] - distances[pos2] <= d)
        {
            steps += 2;
        }
        else
        {
            steps += 2;
            steps += 2 * ((distances[node] - distances[pos2]) - d);
        }
    }
    else if (path[node][parent] == 2)
    {
        // path2
        if (distances[node] - distances[pos1] <= d)
        {
            steps += 2;
        }
        else
        {
            steps += 2;
            steps += 2 * ((distances[node] - distances[pos1]) - d);
        }
    }
    // cout << node << " ---> " << steps << endl;
}

int main()
{
    int t = 1;
    // cin >> t;
    while (t--)
    {
        int n, d;
        cin >> n >> d;
        vector<int> adj[n + 1];
        for (int i = 1; i <= n - 1; i++)
        {
            int x, y;
            cin >> x >> y;
            adj[x].push_back(y);
            adj[y].push_back(x);
        }

        int m1;
        cin >> m1;
        for (int i = 1; i <= m1; i++)
        {
            int x;
            cin >> x;
            path1[x] = 1;
        }
        int m2;
        cin >> m2;
        for (int i = 1; i <= m2; i++)
        {
            int x;
            cin >> x;
            path2[x] = 1;
        }
        dfs_distance(adj, n, 1, -1, 0);
        // cout<<path[3][5]<<endl;
        graph_game(adj, n, 1, -1, 1, 1, d);
        cout << steps << endl;
    }
}
